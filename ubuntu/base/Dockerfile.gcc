FROM ubuntu:18.04 AS ubuntu_base

###############################################################################
# BASE                                                                        #
###############################################################################
FROM ubuntu_base AS base
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        g++-8 \
        gcc-8 \
	sudo \
        libnuma-dev \
        openssh-client \
        gfortran-8 && \
    rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/gcc gcc $(which gcc-8) 30 && \
    update-alternatives --install /usr/bin/g++ g++ $(which g++-8) 30 && \
    update-alternatives --install /usr/bin/gfortran gfortran $(which gfortran-8) 30 && \
    update-alternatives --install /usr/bin/gcov gcov $(which gcov-8) 30

# Setup hpc_user and give sudo permissions without password
RUN     groupadd -r hpc_user && \
        useradd -r -g hpc_user hpc_user && \
        usermod -aG sudo hpc_user && \
        sed -i '26d' /etc/sudoers && \
        sed -i '26i\%sudo   ALL=(ALL:ALL) NOPASSWD:ALL' /etc/sudoers

# Setup environment paths
ENV     PATH=/usr/local/bin:${PATH} \
        LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH \
        LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:$LIBRARY_PATH

FROM base AS base_stripped
# Remove all unnecessary big sized files in the image. These files
RUN     rm -rf /usr/lib/aarch64-linux-gnu/libpthread.a && \
	rm -rf /usr/lib/gcc/aarch64-linux-gnu/8/cc1plus && \ 
	rm -rf /usr/lib/gcc/aarch64-linux-gnu/8/cc1 && \
	rm -rf /usr/lib/gcc/aarch64-linux-gnu/8/lto1 && \
	rm -rf /usr/lib/gcc/aarch64-linux-gnu/8/f951

FROM ubuntu_base AS base_minimal
COPY    --from=base_stripped /usr /usr
COPY    --from=base_stripped /etc /etc

###############################################################################
# UTILS                                                                       #
###############################################################################
FROM base as utils
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
	wget \
        git \
        automake \
        autoconf \
        libtool \
	m4 \
	pkg-config \
        ca-certificates \
        python && \
    rm -rf /var/lib/apt/lists/*

###############################################################################
# UCX                                                                         #
###############################################################################
FROM utils AS ucx
RUN mkdir -p /tmp/ucx && \
    cd /tmp/ucx && \
    git clone https://github.com/openucx/ucx.git && \
    cd ucx && \
    git checkout v1.6.0 && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local --disable-doxygen-doc --without-knem && \
    make -j64 && make install -j64 && \
    rm -rf /tmp/ucx

FROM ucx AS ucx_stripped
RUN  cd /usr/local && rm -rf include games man share src && \
     (find . -name "*.a" | xargs -n1 rm) || exit 0

FROM ubuntu_base AS ucx_minimal
COPY --from=ucx_stripped /usr/local /usr/local

###############################################################################
# OPENMPI                                                                     #
###############################################################################
FROM utils AS openmpi
COPY --from=ucx /usr/local /usr/local
RUN mkdir -p /tmp/openmpi && \
    cd /tmp/openmpi && \
    wget https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.0.tar.gz && \
    tar -zxf openmpi-4.0.0.tar.gz && \
    cd openmpi-4.0.0 && \
    ./configure --prefix=/usr/local --enable-mpi-cxx --with-cma --enable-mpirun-prefix-by-default --enable-mpi1-compatibility --with-ucx=/usr/local --disable-oshmem && \
    make -j && make install -j && \
    rm -rf /tmp/openmpi

FROM openmpi AS openmpi_stripped
RUN  cd /usr/local && rm -rf include games man share src && \
     (find . -name "*.a" | xargs -n1 rm) || exit 0

FROM ubuntu_base AS openmpi_minimal
COPY --from=openmpi_stripped /usr/local /usr/local

###############################################################################
# OPENBLAS                                                                    #
###############################################################################
FROM utils AS openblas
RUN mkdir -p /tmp/openblas && \
    cd /tmp/openblas && \
    wget https://github.com/xianyi/OpenBLAS/archive/v0.3.3.tar.gz && \
    tar -zxf v0.3.3.tar.gz && \
    cd OpenBLAS-0.3.3 && \
    make USE_THREAD=0 TARGET=THUNDERX2T99 CC=gcc -j64 && \
    make TARGET=THUNDERX2T99 CC=gcc PREFIX=/usr/local install && \
    rm -rf /tmp/openblas

FROM openblas AS openblas_stripped
RUN  cd /usr/local && rm -rf include games man share src && \
     (find . -name "*.a" | xargs -n1 rm) || exit 0

FROM ubuntu_base AS openblas_minimal
COPY --from=openblas_stripped /usr/local /usr/local

###############################################################################
# CMAKE                                                                       #
###############################################################################
FROM utils AS cmake
RUN mkdir -p /tmp/cmake && \
    wget -q -nc --no-check-certificate -P /tmp/cmake https://cmake.org/files/v3.14/cmake-3.14.5.tar.gz && \
    mkdir -p /tmp/cmake && tar -x -f /tmp/cmake/cmake-3.14.5.tar.gz -C /tmp/cmake -z && \
    cd /tmp/cmake/cmake-3.14.5 && ./bootstrap --prefix=/usr/local --parallel=$(nproc) && \
    make -j$(nproc) && \
    make install && \
    rm -rf /tmp/cmake

FROM cmake AS cmake_stripped
RUN  cd /usr/local && rm -rf include games man share src && \
     (find . -name "*.a" | xargs -n1 rm) || exit 0

FROM ubuntu_base AS cmake_minimal
COPY --from=cmake_stripped /usr/local /usr/local

###############################################################################
# FFTW3                                                                       #
###############################################################################
FROM utils AS fftw3
COPY --from=openmpi /usr/local /usr/local
RUN mkdir -p /tmp/fftw3 && \
    cd /tmp/fftw3 && \
    wget http://www.fftw.org/fftw-3.3.8.tar.gz && \
    tar -zxf fftw-3.3.8.tar.gz && \
    mkdir build && cd build && \
    ../fftw-3.3.8/configure --prefix=/usr/local --enable-neon --enable-fma --enable-generic-simd128 --enable-armv8-cntvct-el0 --enable-mpi --enable-openmp --enable-threads --enable-shared --enable-static --enable-fortran && make -j && make install && cd .. && \
    mkdir buildf && cd buildf && \
    ../fftw-3.3.8/configure --prefix=/usr/local --enable-neon --enable-fma --enable-generic-simd128 --enable-armv8-cntvct-el0 --enable-mpi --enable-openmp --enable-threads --enable-shared --enable-static --enable-fortran --enable-single && make -j && make install && cd .. && \
     rm -rf /tmp/fftw3

FROM fftw3 AS fftw3_stripped
RUN  cd /usr/local && rm -rf include games man share src && \
     (find . -name "*.a" | xargs -n1 rm) || exit 0

FROM ubuntu_base AS fftw3_minimal
COPY --from=fftw3_stripped /usr/local /usr/local

###############################################################################
# SCALAPACK                                                                   #
###############################################################################
FROM utils AS scalapack
COPY --from=openblas /usr/local /usr/local
COPY --from=openmpi /usr/local /usr/local
COPY --from=cmake /usr/local /usr/local
RUN mkdir -p /tmp/scalapack && \
    cd /tmp/scalapack && \
    wget https://github.com/Reference-ScaLAPACK/scalapack/archive/v2.1.0.tar.gz && \
    tar -zxvf v2.1.0.tar.gz && \
    cd scalapack-2.1.0 && \
    cmake \
        -DMPI_Fortran_COMPILER=mpif90 \
        -DMPI_C_COMPILER=mpicc \
        -DCMAKE_C_COMPILER=gcc \
        -DCMAKE_Fortran_COMPILER=gfortran \
        -DCMAKE_Fortran_FLAGS="-O3 -mcpu=thunderx2t99 -march=armv8.1-a+lse -finline-functions -fPIC" \
        -DCMAKE_C_FLAGS="-O3 -mcpu=thunderx2t99 -march=armv8.1-a+lse -finline-functions -fPIC" \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DBUILD_SHARED_LIBS=ON \
        . && \
    make -j64 && make install && \
    rm -rf /tmp/scalapack

FROM scalapack AS scalapack_stripped
RUN  cd /usr/local && rm -rf include games man share src && \
     (find . -name "*.a" | xargs -n1 rm) || exit 0

FROM ubuntu_base AS scalapack_minimal
COPY --from=scalapack_stripped /usr/local /usr/local
