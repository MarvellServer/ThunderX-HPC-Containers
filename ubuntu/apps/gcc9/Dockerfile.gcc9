
###############################################################################
# GCC-9.2.0-glibc-2.30                                                                       #
###############################################################################
FROM devel AS gcc9

RUN mkdir -p /docker/build

RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    flex \
    texinfo \
    help2man \
    unzip \
    make \
    gawk \
    libtool-bin \
    libncurses5-dev \
    bison \
    rsync \
    python3-pip \
    python3.6-dev \
    python3-dev && \
    rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1 && \
    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

RUN mkdir -p /tmp/ct-ng && \
    cd /tmp/ct-ng && \
    git clone https://github.com/crosstool-ng/crosstool-ng.git && \
    cd crosstool-ng && \
    ./bootstrap && ./configure --prefix=/usr/local && \
    make -j && make install && \
    rm -rf /tmp/ct-ng

COPY data/config /docker/build/.config


ENV CT_EXPERIMENTAL=y  \
    CT_ALLOW_BUILD_AS_ROOT=y  \
    CT_ALLOW_BUILD_AS_ROOT_SURE=y

COPY data/postinstall.sh /docker/build/postinstall.sh
COPY data/script.sh /docker/build/script.sh

RUN cd /docker/build && \
    ct-ng build 

RUN cd /docker/build && \
    rm -rf /tmp/packages && \
    sh postinstall.sh && \
    bash -c 'source script.sh'

# fix libtool due to a crosstool-ng issue
RUN sed -i 's#/tmp/packages/work/tools/bin/##' /opt/gcc-9.2.0-glibc-2.30/bin/libtool
RUN sed -i 's#/tmp/packages/work/tools/bin/##' /opt/gcc-9.2.0-glibc-2.30/bin/libtoolize
RUN sed -i 's#^NM.*#NM=\"nm -B\"#' /opt/gcc-9.2.0-glibc-2.30/bin/libtool

ENV PATH=/opt/gcc-9.2.0-glibc-2.30/bin:/usr/local/bin:${PATH}
ENV CFLAGS="-idirafter /usr/include"
ENV CXXFLAGS="-idirafter /usr/include"
ENV FFLAGS="-idirafter /usr/include"
ENV FCFLAGS="-idirafter /usr/include"
ENV LDFLAGS="-Wl,-dynamic-linker=/opt/gcc-9.2.0-glibc-2.30/aarch64-linux-gnu/sysroot/lib64/ld-2.30.so"
ENV LDFLAGS="${LDFLAGS} /opt/gcc-9.2.0-glibc-2.30/aarch64-linux-gnu/sysroot/lib64/libc.so.6"
ENV LDFLAGS="${LDFLAGS} /opt/gcc-9.2.0-glibc-2.30/aarch64-linux-gnu/sysroot/lib64/libm.so.6"
ENV LDFLAGS="${LDFLAGS} /opt/gcc-9.2.0-glibc-2.30/aarch64-linux-gnu/sysroot/lib64/libdl.so.2"
ENV LDFLAGS="${LDFLAGS} /opt/gcc-9.2.0-glibc-2.30/aarch64-linux-gnu/sysroot/lib64/libpthread.so.0"
ENV LDFLAGS="${LDFLAGS} /opt/gcc-9.2.0-glibc-2.30/aarch64-linux-gnu/sysroot/lib64/librt.so.1"
ENV LDFLAGS="${LDFLAGS} -Wl,-rpath=/opt/gcc-9.2.0-glibc-2.30/aarch64-linux-gnu/sysroot/lib"
ENV LDFLAGS="${LDFLAGS} -Wl,-rpath-link=/opt/gcc-9.2.0-glibc-2.30/aarch64-linux-gnu/sysroot/lib"
ENV LDFLAGS="${LDFLAGS} -Wl,-rpath=/opt/gcc-9.2.0-glibc-2.30/aarch64-linux-gnu/sysroot/lib64"
ENV LDFLAGS="${LDFLAGS} -Wl,-rpath-link=/opt/gcc-9.2.0-glibc-2.30/aarch64-linux-gnu/sysroot/lib64"
ENV LDFLAGS="${LDFLAGS} -L/usr/lib/aarch64-linux-gnu"
ENV LDFLAGS="${LDFLAGS} -Wl,-rpath-link=/usr/lib/aarch64-linux-gnu"

RUN apt-get update && \
    apt-get -y install vim

# build ucx
RUN mkdir -p /tmp/ucx && \
    cd /tmp && \
    git clone https://github.com/openucx/ucx.git ucx && \
    cd ucx && \
    git fetch --all && \
    git checkout v1.6.1 && \
    ./autogen.sh

RUN cd /tmp/ucx && \
    mkdir build; cd build && \
    ../contrib/configure-release --prefix=/usr/local --disable-doxygen-doc --without-knem && \
    make clean && \
    make -j16 V=1 && \
    make install

# build openmpi
ENV LDFLAGS="-L/usr/local/lib -Wl,-rpath=/usr/local/lib -Wl,-rpath-link=/usr/local/lib ${LDFLAGS}"
RUN cd /tmp && \
    wget https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.0.tar.gz && \
    tar -zxf openmpi-4.0.0.tar.gz
RUN cd /tmp/openmpi-4.0.0 && \
    ./configure --prefix=/usr/local --enable-mpi-cxx --with-cma --enable-mpirun-prefix-by-default --enable-mpi1-compatibility --with-ucx=/usr/local --disable-oshmem

RUN cd /tmp/openmpi-4.0.0 && \
    make -j64 && \
    make install -j

# cmake
RUN cd /tmp && \
    git clone https://gitlab.kitware.com/cmake/cmake.git && \
    cd cmake && \
    git fetch --all && \
    git checkout v3.16.3

#ENV CFLAGS="${CFLAGS} -idirafter /usr/include/aarch64-linux-gnu"
#ENV CXXFLAGS="${CFLAGS} -idirafter /usr/include/aarch64-linux-gnu"
RUN apt-get -y install libssl-dev
RUN cd /tmp/cmake && \
    mkdir build && \
    cd build && \
    CFLAGS="${CFLAGS} -idirafter /usr/include/aarch64-linux-gnu" CXXFLAGS="${CFLAGS} -idirafter /usr/include/aarch64-linux-gnu" ../configure --prefix=/usr/local --parallel=64 && \
    make -j64 && \
    make install

# hdf5
RUN cd /tmp && \
    wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.6/src/hdf5-1.10.6.tar.gz && \
    tar -zvxf hdf5-1.10.6.tar.gz

RUN cd /tmp/hdf5-1.10.6 && \
    mkdir build && \
    cd build && \
    ../configure --enable-parallel --enable-fortran --prefix=/usr/local && \
    make -j && \
    make install

#Create necessary directory
RUN mkdir -p /usr/local/openmc/bin && \
    mkdir -p /docker/run/DATA && \
    mkdir -p /docker/run

# Download source
RUN cd /tmp && \
    wget https://github.com/openmc-dev/openmc/archive/v0.11.0.tar.gz && \
    tar -zxvf v0.11.0.tar.gz

# Build OPENMC
RUN cd /tmp/openmc-0.11.0 && \
    mkdir build && cd build 
RUN cd /tmp/openmc-0.11.0/build && \
    cmake \
    -DCMAKE_C_COMPILER=mpicc \
    -DCMAKE_CXX_COMPILER=mpicxx \
    -DCMAKE_CXX_FLAGS:STRING="-O3 -g -funroll-loops -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -fopenmp" \
    -DCMAKE_C_FLAGS:STRING="-O3 -g -funroll-loops -mcpu=thunderx2t99 -march=armv8.1-a+lse -ffast-math -fopenmp" \
    -Doptimize=on \
    -Dopenmp=on \
    .. && \
    make -j64 && make install && \
	  cp -r /tmp/openmc-0.11.0/build/bin/openmc /usr/local/openmc/bin/ && \
	  cp -r /tmp/openmc-0.11.0/build/lib/* /usr/local/lib/

#   sed -i 's/-2 / /g' CMakeFiles/openmc.dir/link.txt && \
#   sed -i 's/-2 / /g' CMakeFiles/libopenmc.dir/link.txt && \

COPY  data/geometry.xml /docker/run/DATA
COPY  data/plots.xml /docker/run/DATA
COPY  data/materials.xml /docker/run/DATA
COPY  data/settings.xml /docker/run/DATA
COPY  data/run.sh /docker/run

ENV   PATH=/usr/local/openmc/bin/:${PATH}

USER    guest
RUN     sudo chown -R guest:guest /docker/run/
ENTRYPOINT sh "/docker/run/run.sh"
