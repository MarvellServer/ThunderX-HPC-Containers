# Conditional Makefile macros for this kernel & version:

# User settings (all case-insensitive):
#COMPILER          = intel    # Intel, GNU, ARM (later, PGI?)
COMPILER          = gnu    # Intel, GNU, ARM (later, PGI?)
ARCH              = aarch64      # Not currently used (using xHost/native modes)
MPI               = yes      # Yes/No, True/False or Enabled/Disabled


# ******************************************************************
# Provide system aliases that MIGHT need to be modified by the end user:
MPIFC = mpif90         # Could be mpif90 (default), or mpiifort, etc

# Compile the LAPACK rountes from the provided source code.
LAPACKSRC := yes

# Convert all above vars to lower case:
COMPILER := $(shell echo ${COMPILER} | tr '[:upper:]' '[:lower:]')
ARCH     := $(shell echo ${ARCH}     | tr '[:upper:]' '[:lower:]')
MPI      := $(shell echo ${MPI}      | tr '[:upper:]' '[:lower:]')

# Zero out our key variables:
FC := 
FC_FLAGS := 
LD_FLAGS := 
LD_LIBS  := 

# Convert all 'true' MPI answers to 'yes', otherwise no:
ifeq ($(MPI),true)
  MPI := yes
else ifeq ($(MPI),enabled)
  MPI := yes
endif
#ARMPL_DIR=/opt/arm/armpl-19.2.0_ThunderX2CN99_RHEL-7_arm-hpc-compiler_19.2_aarch64-linux
#ARMPL_DIR=/opt/arm/armpl-19.1.0_ThunderX2CN99_RHEL-7_arm-hpc-compiler_19.1_aarch64-linux
# If the ARMPL_DIR variable is set, add it to the link:
ifneq ($(strip $(ARMPL_DIR)),)
#  LD_FLAGS += -L/opt/arm/arm-hpc-compiler-19.1_Generic-AArch64_RHEL-7_aarch64-linux/lib -L${ARMPL_DIR}/lib -larmpl_lp64 -lamath -lsimdmath
  #LD_FLAGS += -L${ARMPL_DIR}/lib -larmpl_lp64 -lamath -lsimdmath
endif



# Note: For simplicity, we're going to ignore cross-compilation and use the "-march=native" (gnu), 
# "-mcpu=native" /armflang) and "-xHost" (intel) compiler flags to optimize for the platform we're on.  
# Change in the second FC_FLAGS  setting below if that doesn't apply.

# ********* Intel compiler options  ************
ifeq ($(COMPILER),intel)
  FC := ifort
  #FC_FLAGS += -qno-opt-dynamic-align -fp-model source -convert big_endian -assume byterecl -ftz -assume realloc_lhs -xCORE-AVX2 -O3
  FC_FLAGS += -qno-opt-dynamic-align -fp-model fast -convert big_endian -assume byterecl -ftz -assume realloc_lhs -xCORE-AVX2 -O3
  # If the MKLROOT variable is set, add that to the link:
  ifneq ($(strip $(MKLROOT)),)
    LD_LIBS += -L${MKLROOT}/lib/intel64 -lmkl_rt
    LAPACKSRC := no
  endif

  FC_FLAGS += 
endif

# ********* NEC compiler options  ************
ifeq ($(COMPILER),nec)
  FC := nfort
  FC_FLAGS += -v -O4 -finline-functions -report-all -fdiag-vector=2 -fextend-source -D_NOGETPID
  LD_LIBS += -llapack -lblas_sequential
  LAPACKSRC := no 
  LD_FLAGS +=
  MPIFC = mpinfort         # Could be mpif90 (default), or mpiifort, etc
endif

#USE HPC_INSTALLROOT option with new glibc
HPC_INSTALLROOT=/opt/marvell/apps/gcc/8.2.0-glibc-2.29
#-ftree-vectorize  -ftree-slp-vectorize
#-fprefetch-loop-arrays NO effect
#GCC vectorization option -fopt-info-vec -fopt-info-vec-missed
# ********* GNU compiler options  ************
ifeq ($(COMPILER),gnu)
  FC := gfortran
  FC_FLAGS += -O3 -ftree-slp-vectorize -g -ffp-contract=fast -ffree-line-length-none
# LD_FLAGS += -lopenblas
  LD_FLAGS += __LD_FLAGS__
  FC_FLAGS += -march=native #-mcpu=thunderx2t99	#armv8.1-a+crypto+aes+nosha2
endif


# ********* ARM compiler options  ************
ifeq ($(COMPILER),arm)
  FC := armflang
  FC_FLAGS += -O3 -ffp-contract=fast -ffree-line-length-none -D_NOGETPID
  LD_FLAGS += 

  FC_FLAGS += -mcpu=native
endif

# If we're using MPI, then use ${MPIFC}
ifeq ($(MPI),yes)
  FC := ${MPIFC}
  FC_FLAGS += -D_MPI
endif
