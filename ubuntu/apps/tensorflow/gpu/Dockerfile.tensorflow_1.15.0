###############################################################################
# TENSORFLOW 1.15.0                                                           #
###############################################################################
FROM devel AS tensorflow_1.15.0

COPY  --from=ucx      /usr/local /usr/local
COPY  --from=openmpi  /usr/local /usr/local
COPY  --from=openblas /usr/local /usr/local
COPY  --from=cmake    /usr/local /usr/local
COPY  --from=hdf5     /usr/local /usr/local

# Install dependencies
RUN     apt-get update -y && \
	DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
		openjdk-8-jdk \
		zip unzip \
        	python3.6 \
		python3-pip \
		python3-setuptools \
		python3-dev && \
	rm -rf /var/lib/apt/lists/*

# Set python3 as default python
RUN     update-alternatives --install /usr/bin/python python /usr/bin/python3 1 && \
	update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

# Create the installation directory and set the PATH
ENV     INSTALL_DIR=/usr/local/tensorflow
RUN     mkdir -p $INSTALL_DIR/bin
ENV     PATH=$INSTALL_DIR/bin:$PATH

# Install Bazel
ENV     EXTRA_BAZEL_ARGS="--host_javabase=@local_jdk//:jdk -c opt"
RUN     mkdir -p /tmp/tensorflow && \
	cd /tmp/tensorflow && \
	wget https://github.com/bazelbuild/bazel/releases/download/0.26.1/bazel-0.26.1-dist.zip && \
	mkdir -p bazel-0.26.1-dist && \
	cd bazel-0.26.1-dist && \
	unzip ../bazel-0.26.1-dist.zip && \
	bash compile.sh && \
	cp /tmp/tensorflow/bazel-0.26.1-dist/output/bazel $INSTALL_DIR/bin
	
# Install Python Packages
ENV     PYTHONPATH=$INSTALL_DIR/lib/python3.6/site-packages

RUN     pip3 install --no-cache-dir --upgrade pip==20.0.2 && \
	pip3 install --prefix=$INSTALL_DIR --no-cache-dir cython==0.29.16 && \
	pip3 install --prefix=$INSTALL_DIR --no-cache-dir numpy==1.18.2 && \
	pip3 install --prefix=$INSTALL_DIR --no-cache-dir setuptools==46.1.3 && \
	pip3 install --prefix=$INSTALL_DIR --no-cache-dir six==1.14.0 && \
	pip3 install --prefix=$INSTALL_DIR --no-cache-dir mock==4.0.2 && \
	pip3 install --prefix=$INSTALL_DIR --no-cache-dir wheel==0.34.2 && \
	pip3 install --prefix=$INSTALL_DIR --no-cache-dir h5py==2.10.0 && \
	pip3 install --prefix=$INSTALL_DIR --no-cache-dir ck==1.12.3 && \
	pip3 install --prefix=$INSTALL_DIR --no-cache-dir absl-py==0.9.0 && \
	pip3 install --prefix=$INSTALL_DIR --no-cache-dir pycocotools==2.0.0 && \
	pip3 install --prefix=$INSTALL_DIR --no-cache-dir --no-deps keras_applications==1.0.8 && \
	pip3 install --prefix=$INSTALL_DIR --no-cache-dir --no-deps keras_preprocessing==1.0.5
		

# Install CUDNN and NCCL
COPY    ./data/cudnn-10.2-linux-aarch64-v7.6.4.30.tgz /tmp/tensorflow
COPY    ./data/libnccl2_2.4.8-2+cuda10.1_arm64.deb /tmp/tensorflow
RUN     cd /usr/local && \
	tar -zxvf /tmp/tensorflow/cudnn-10.2-linux-aarch64-v7.6.4.30.tgz && \
	dpkg -i /tmp/tensorflow/libnccl2_2.4.8-2+cuda10.1_arm64.deb

# Get TensorFlow Source
RUN	cd /tmp/tensorflow && \
	wget https://github.com/tensorflow/tensorflow/archive/v1.15.0.tar.gz && \
	tar -zxvf v1.15.0.tar.gz

# NVCC compiler provided in 10.2 package returns version as 10.1.
# Dont let TF configure complain about this.
RUN     sed -i 's/nvcc_name, cuda_version, get_nvcc_version/nvcc_name, "10.1", get_nvcc_version/g' /tmp/tensorflow/tensorflow-1.15.0/third_party/gpus/find_cuda_config.py

# The following are the configure questions in Tensorflow 1.15.0 and our answers to that
# Python Location - "\n"
# Python library path - "/usr/local/tensorflow/lib/python3.6/site-packages\n"
# XLA JIT Support - "Y\n"
# OpenCL SYCL support - "N\n"
# ROCm support - "N\n"
# CUDA support - "Y\n"
# TensorRT support - "N\n"
# Cuda compute capabilities - "\n"
# Use clang compiler - "N\n"
# GCC Path - "\n"
# MPI support - "Y\n"
# MPI Path - "\n"
# Optimization Flags  - "-O3 -mcpu=thunderx2t99 -march=armv8.1-a+lse -Wno-sign-compare\n"
# Interactive configure - "N\n"
#
# The below string is concatenation of all above answers
ENV     CONFIGURE_INPUT="\n/usr/local/tensorflow/lib/python3.6/site-packages\nY\nN\nN\nY\nN\n\nN\n\nY\n\n-O3 -mcpu=thunderx2t99 -march=armv8.1-a+lse -Wno-sign-compare\nN\n"

# Configure and build
RUN	cd /tmp/tensorflow/tensorflow-1.15.0 && \
	echo "$CONFIGURE_INPUT" | ./configure && \
	cd /tmp/tensorflow/tensorflow-1.15.0 && \ 
	bazel build \
	  --config cuda \
	  --config opt \
	  --show_timestamps \
	  --output_filter=DONT_MATCH_ANYTHING \
	  //tensorflow/tools/pip_package:build_pip_package 

# Install the generated wheel
RUN    cd /tmp/tensorflow/tensorflow-1.15.0 && \
       ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow/pip_package && \
       pip3 install --prefix=$INSTALL_DIR --no-cache-dir /tmp/tensorflow/pip_package/tensorflow-1.15.0-cp36-cp36m-linux_aarch64.whl

FROM    runtime
LABEL   MAINTAINER="Ashwin Sekhar T K"
LABEL   MAINTAINER_EMAIL="asekhar@marvell.com"
LABEL   TENSORFLOW_VERSION="1.15.0"

COPY  --from=ucx      /usr/local /usr/local
COPY  --from=openmpi  /usr/local /usr/local
COPY  --from=openblas /usr/local /usr/local
COPY  --from=cmake    /usr/local /usr/local
COPY  --from=hdf5     /usr/local /usr/local
COPY  --from=tensorflow_1.15.0 /usr/local/tensorflow /usr/local/tensorflow

# Install CUDNN
COPY    ./data/cudnn-10.2-linux-aarch64-v7.6.4.30.tgz /tmp
RUN     cd /usr/local && \
	tar -zxvf /tmp/cudnn-10.2-linux-aarch64-v7.6.4.30.tgz && \
	rm -rf /tmp/cudnn-10.2-linux-aarch64-v7.6.4.30.tgz

# Install dependencies
RUN     apt-get update -y && \
	DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        	python3.6 && \
	rm -rf /var/lib/apt/lists/*

# Remove unnecessary packages
RUN     apt-get update -y && \
        apt-mark manual \
		*cudart* \
		*cublas* \
		*cufft* \
		*curand* \
		*cusolver* \
		*cusparse* && \
        DEBIAN_FRONTEND=noninteractive apt-get autoremove -y && \
        rm -rf /var/lib/apt/lists/*

ENV     PYTHONPATH=/usr/local/tensorflow/lib/python3.6/site-packages:/usr/local/tensorflow
ENV     PATH=/usr/local/tensorflow/bin:$PATH
